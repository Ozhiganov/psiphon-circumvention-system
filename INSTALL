--------------------------------------------------------------------------------
Psiphon Circumvention Tool INSTALL
--------------------------------------------------------------------------------


Contents
--------------------------------------------------------------------------------

Overview
Build/Deploy Host Installation
Debian Server Host Installation
Network Database Configuration


Overview
--------------------------------------------------------------------------------

A Psiphon system consists of:

- A database of network assets. Currently, this is stored in spreadsheet form
in Data/psi_db.xls.

- A number of server hosts. A host consists of one or more servers. In our
terminology, a server is a single instance of the server software behind a
single IP address.

- A set client builds.

- A build/deploy host.

The build/deploy host is set up manually. Part of each server host setup is also
performed manually. The build script is used to create client executables on
the build/deploy host and from the same host a deploy script completes the
server hosts installs or updates server hosts with new information.


Build/Deploy Host Installation
--------------------------------------------------------------------------------

Dependencies
------------

- Windows XP/Vista/7
- Microsoft Visual Studio Express 10
- Microsoft Platform SDK
- Python 2.6+ and modules


1. Python setup
---------------

- Download and install Python 2.6+:

  http://www.python.org/download/releases/2.6/

- Download and install the corresponding version of setup tools:

  http://pypi.python.org/pypi/setuptools#downloads

- Install additional modules:

  easy_install xlrd xlwrt paramiko


2. Windows Client Build Setup
-----------------------------

- Install Microsoft Visual Studio 10

- Install Windows Platform SDK

  http://msdn.microsoft.com/en-us/windows/bb980924

- Authenticode code signing setup

Psiphon includes support for authenticode signing of the client builds. Code
signing is performed by the automated build script using keys found in the
Data/CodeSigning subdirectory of the source tree. The include keys are for
test purposes only. For production use, obtain a code signing certificate from
a commercial CA.

To manually test the individual code signing commands:

- Create a new test signing key:
"<Path to SDK>\Bin\makecert.exe" -r -sv key.pvk -n "CN=MyCN" cert.spc
"<Path to SDK>\Bin\pvk2pfx.exe" -pvk key.pvk -spc cert.spc -pfx MyPFX.pfx

- Sign an executable:
"<Path to SDK>\Bin\signtool.exe" sign /f MyPFX.pfx psiphon.exe

- Review tool paths in Automation/psi_build.py and adjust if required.


4. Android Client Build Setup
-----------------------------

[TODO]


5. Build
--------

- Invoke the build script

  cd Automation
  python psi_build.py

Outputs are in Automation/Builds. There is one client per Sponsor ID and
Client ID. For more information on these values, see the design paper and see
the section below on configuring the network database.

If building new clients, invoke the deploy script to upload the builds to the
hosts in your network database for automatic client upgrade.

- Invoke the deploy script

  cd Automation
  python psi_deploy.py


Debian Server Host Installation
--------------------------------------------------------------------------------

Dependencies
------------

- Debian 6.0 (squeeze)
- Openswan 2.6.32 with KLIPS kernel module
- xl2tp 1.2.8
- Python 2.6+ and modules


1. Get Openswan, xl2tp, and python packages
-------------------------------------------

apt-get update
apt-get install -y openswan
apt-get install -y xl2tpd
apt-get install -y python-setuptools python-dev
easy_install cherrypy webob xlrd portalocker netifaces


2. Get, patch and install Openswan KLIPS kernel module
------------------------------------------------------

NOTE: We're using KLIPS in place of NETKEY as only KLIPS passed both tests:
- Multiple clients behind the same NAT can connect
- Multiple clients behind different NATs with the same local IP can connect

apt-get install openswan-modules-source

Edit modules/openswan/linux/include/openswan/ipsec_param.h in /usr/src/openswan-modules.tar.bz2:
Set IPSEC_NUM_IF 20 or however number of interfaces are needed
(See: http://comments.gmane.org/gmane.network.openswan.user/15675)

modules-assistant
PREPARE
SELECT openswan-modules
BUILD
INSTALL


3. Configure an instance of xl2tpd per external IP address
----------------------------------------------------------

We run multiple xl2tpd instances, one per public IP address, due to an issue
described here:
https://lists.openswan.org/pipermail/users/2011-February/020143.html
(Monitor for a fix here: http://www.xelerance.com/wp-content/uploads/software/xl2tpd/CHANGES)

[TODO: we will script creation and upload of these confs as part of deploy script]

/etc/xl2tpd/xl2tpd<n>.conf:

  [global]
  listen-addr = <server IP address n>

  [lns default]
  ip range = 10.<n>.0.2-10.<n>.255.254
  local ip = 10.<n>.0.1
  require chap = yes
  refuse pap = yes
  require authentication = yes
  name = PsiphonV
  pppoptfile = /etc/ppp/options.xl2tpd
  length bit = yes

/etc/init.d/xl2tpd:

  case "$1" in
    start)
          echo -n "Starting $DESC: "
          test -d /var/run/xl2tpd<n> || mkdir -p /var/run/xl2tpd<n>
          start-stop-daemon --start --quiet --pidfile $PIDFILE.<n> \
                  --exec $DAEMON -- -c /etc/xl2tpd/xl2tpd<n>.conf \
                  -p $PIDFILE.<n> -C /var/run/xl2tpd1/l2tp-control \
                  $DAEMON_OPTS
          echo "$NAME.<n>."
          ;;
    stop)
          echo -n "Stopping $DESC: "
          start-stop-daemon --oknodo --stop --quiet --pidfile $PIDFILE.<n> \
                  --exec $DAEMON
          echo "$NAME.<n>."
          ;;
    restart)
          $0 stop
          sleep 1
          $0 start
          ;;
   *)
          N=/etc/init.d/$NAME
          echo "Usage: $N {start|stop|restart}" >&2
          exit 1
          ;;
  esac


5. Configure static configuration files
---------------------------------------

/etc/ppp/options.xl2tpd:

  ipcp-accept-local
  ipcp-accept-remote
  ms-dns 8.8.8.8
  noccp
  auth
  crtscts
  idle 1800
  mtu 1410
  mru 1410
  nodefaultroute
  debug
  lock
  proxyarp
  connect-delay 5000

/etc/ppp/chap-secrets:

  *       *       password        *

/etc/ipsec.secrets:

  <empty file>

Add to /etc/sysctl.conf:

  net.ipv4.ip_forward=1


6. Test L2TP/IPSec
------------------

  /etc/init.d/ipsec restart
  /etc/init.d/xl2tpd restart


7. Configure firewall
---------------------

iptables-rules:

  *filter
  -A INPUT -i lo -j ACCEPT
  -A INPUT -d 127.0.0.0/8 -i ! lo -j REJECT --reject-with icmp-port-unreachable
  -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
  -A INPUT -s <source-IP-address-for-ssh-access> -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
  -A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT
  -A INPUT -p esp -j ACCEPT
  -A INPUT -p ah -j ACCEPT
  -A INPUT -p udp --dport 500 -j ACCEPT
  -A INPUT -p udp --dport 4500 -j ACCEPT
  -A INPUT -i ipsec+ -p udp -m udp --dport l2tp -j ACCEPT
  -A INPUT -j REJECT --reject-with icmp-port-unreachable
  COMMIT

  *nat
  <one line for each xl2tpd instance>
  -A POSTROUTING -s 10.<n>.0.0/16 -o eth+ -j MASQUERADE
  COMMIT

[TODO: add rules to firewall clients from each other]

/etc/network/if-up.d/firewall (chmod +x):

  #!/bin/sh

  iptables-restore < /etc/iptables.rules


8. Configure logging
--------------------

(1) Log VPN disconnect (for session duration stats) (done by psi_deploy.py)

cp psi-ip-down /etc/ppp/ip-down.d
chmod +x /etc/ppp/ip-down.d/psi-ip-down

(2) Direct all psiphonv logs to psiphonv.log and turn off all VPN logging
(xl2tpd and pluto) that logs client IP addresses.
See: http://wiki.rsyslog.com/index.php/Filtering_by_program_name.

Add to /etc/rsyslog.conf (IMPORTANT: put new rules at the top of the rules section):

  ###############
  #### RULES ####
  ###############

  if $programname == 'psiphonv' then /var/log/psiphonv.log
  if $programname == 'psiphonv' then ~
  if $programname == 'xl2tpd' then /dev/null
  if $programname == 'xl2tpd' then ~
  if $programname == 'pluto' then /dev/null
  if $programname == 'pluto' then ~

(3) Rotate psiphonv.log

Add to /etc/logrotate.d/rsyslog:

  /var/log/psiphonv.log


9. Configure GeoIP lookup
-------------------------

cd /root

wget http://geolite.maxmind.com/download/geoip/api/c/GeoIP.tar.gz
tar xvf GeoIP.tar.gz
cd GeoIP
[apt-get install zlib1g-dev]
./configure
make
make check
make install

[TODO: check again for latest-version Python download URL]

cd ..
wget http://geolite.maxmind.com/download/geoip/api/python/GeoIP-Python-1.2.5.tar.gz
tar xvf GeoIP-Python-1.2.5.tar.gz
cd GeoIP-Python-1.2.5
[apt-get install gcc]
[apt-get install python-dev]
python setup.py build
python setup.py install


10. Add host and servers to network database
--------------------------------------------

See the section below on Network Database Configuration.

- Add an entry for the host, including a name (Host ID), IP address, and
root-privilege SSH user credentials and host public key. This information is
used by the deploy script to connect to each host and upload configuration
information.

- Add an entry for each server on the host, including IP address, web server
authentication information, and discovery schedule.

[TODO: script to generate web server secret, certificate and private key]


11. Invoke the deploy script
----------------------------

Run this step on the build/deploy machine.

- Invoke the deploy script

  cd Automation
  python psi_deploy.py

For each host in the database, this script:

a. Uploads the latest web server source code and any additional source code and
generated configuration.

b. Uploads a subset of the database consisting of server info the host must be
prepared to issue for discovery; home page information; and server credentials.

c. Upload new client builds for automatic upgrade.


Network Database Configuration
--------------------------------------------------------------------------------

The network database schema and design is described in the design document.

[TODO: ensure database is described in design document]

The database is represented as a spreadsheet. There's an example spreadsheet
in the source tree here: Data/psi_db.xls. As this is a critical infomation
asset containing all authentication information for hosts and servers and
enumerating all IP addresses, in production this file is to be protected.

We recommend storing it in encrypted form only and mounting it temporarily
in a location accessible by the build/deploy host as required.

To override the default location of the database spreadsheet:

- Create a python source file:

  Automation/psi_data_config.py

- In this file, set DATA_ROOT to point to the directory containing the
real spreadsheet; for example:

  DATA_ROOT = 'C:\MyPsiphonData'
